{"version":3,"sources":["components/TaskInput.jsx","components/TaskList.jsx","components/CompletedTasks.jsx","App.jsx","utils/utils.js","reportWebVitals.js","index.js"],"names":["TaskInput","handleAdd","inputValue","setInputValue","errorMessage","className","onSubmit","type","placeholder","value","onChange","e","target","length","TaskList","tasks","handleDone","map","item","name","onClick","event","id","CompletedTasks","completedTasks","handleDelete","handleRecover","setIsShowCompleted","isShowCompleted","App","useState","setErrorMessage","savedTasks","localStorage","getItem","JSON","parse","isDone","setTasks","useEffect","setItem","stringify","taskList","useMemo","filter","completedTaskList","console","log","pre","preventDefault","Date","getTime","slice","updateTasks","forEach","task","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8003fe2.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function TaskInput({\n  handleAdd,\n  inputValue,\n  setInputValue,\n  errorMessage,\n}) {\n  return (\n    <>\n      <h3>Tasks</h3>\n      <form className=\"header\" onSubmit={handleAdd}>\n        <input\n          className=\"todo-input\"\n          type=\"text\"\n          placeholder=\"Add a task...\"\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n        />\n        <button className=\"add-button\" type=\"submit\">\n          &#10133;\n        </button>\n      </form>\n      {errorMessage.length > 0 && (\n        <span className=\"validate\">{errorMessage}</span>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\n\nexport default function TaskList({ tasks, handleDone }) {\n  return (\n    <div className=\"task-list\">\n      {tasks.length > 0 && (\n        <>\n          <h4>In progress {tasks.length} </h4>\n          <ul>\n            {tasks.map((item) => {\n              return (\n                <li key={item.id}>\n                  {item.name}\n                  <span className=\"add-delete-return-icons\">\n                    <input\n                      className=\"done-checkbox\"\n                      type=\"checkbox\"\n                      onClick={(event) => handleDone(item)}\n                    />\n                  </span>\n                </li>\n              );\n            })}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function CompletedTasks({\n  completedTasks,\n  handleDelete,\n  handleRecover,\n  setIsShowCompleted,\n  isShowCompleted,\n}) {\n  return (\n    <div className=\"completed-tasks\">\n      {completedTasks.length > 0 && (\n        <>\n          <h4>\n            Completed {completedTasks.length}{\" \"}\n            <button\n              className=\"show-hide\"\n              onClick={() => setIsShowCompleted(!isShowCompleted)}\n            >\n              {isShowCompleted ? \"Hide\" : \"Show\"}\n            </button>\n          </h4>\n          {isShowCompleted && (\n            <ul>\n              {completedTasks.map((item) => {\n                return (\n                  <li key={item.id}>\n                    {item.name}\n                    <span className=\"add-delete-return-icons\">\n                      <button\n                        className=\"completed-task-icons\"\n                        id=\"put-back-icon\"\n                        onClick={() => handleRecover(item)}\n                      >\n                        â¤´\n                      </button>\n                      <button\n                        className=\"completed-task-icons\"\n                        onClick={() => handleDelete(item)}\n                      >\n                        &#10060;\n                      </button>\n                    </span>\n                  </li>\n                );\n              })}\n            </ul>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n","import React, { useState, useEffect, useMemo } from \"react\";\nimport { generateKey } from \"./utils/utils\";\nimport TaskInput from \"./components/TaskInput\";\nimport TaskList from \"./components/TaskList\";\nimport CompletedTasks from \"./components/CompletedTasks\";\nimport \"./App.css\";\n\nconst App = () => {\n  const getDataFromLocalStorage = () => {\n    const savedTasks = localStorage.getItem(\"tasks\");\n    if (savedTasks) {\n      return JSON.parse(savedTasks);\n    } else {\n      return [\n        {\n          id: \"Workout for 45 minutes_1635131939043\",\n          name: \"Workout for 45 minutes\",\n          isDone: true,\n        },\n        {\n          id: \"Play with kids_1635131914628\",\n          name: \"Play with kids\",\n          isDone: false,\n        },\n        {\n          id: \"Take a nap for 30 minutes_1635131866702\",\n          name: \"Take a nap for 30 minutes\",\n          isDone: false,\n        },\n        {\n          id: \"Stay away from phone for 2 hours_1635131850670\",\n          name: \"Stay away from phone for 2 hours\",\n          isDone: false,\n        },\n        {\n          id: \"Spend quality time with girlfriend_1635131829895\",\n          name: \"Spend quality time with girlfriend\",\n          isDone: false,\n        },\n        {\n          id: \"Read for 30 minutes The Millionaire Next Door_1635131812295\",\n          name: \"Read for 30 minutes The Millionaire Next Door\",\n          isDone: false,\n        },\n        { id: \"Call Mom_1635131768729\", name: \"Call Mom\", isDone: false },\n      ];\n    }\n  };\n  const [inputValue, setInputValue] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [tasks, setTasks] = useState(getDataFromLocalStorage);\n  const [isShowCompleted, setIsShowCompleted] = useState(false);\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }, [tasks]);\n\n  const handleAdd = (event) => {\n    event.preventDefault();\n\n    if (inputValue.length < 1) {\n      setErrorMessage(\"Input must be filled out\");\n      return;\n    }\n\n    setTasks([\n      {\n        id: generateKey(inputValue),\n        name: inputValue.slice(0, 255),\n        isDone: false,\n      },\n      ...tasks,\n    ]);\n    // reset input and errorMessage after add\n    setErrorMessage(\"\");\n    setInputValue(\"\");\n  };\n\n  const handleDone = (item) => {\n    let updateTasks = [...tasks];\n    updateTasks.forEach((task) => {\n      if (item.id === task.id) {\n        task.isDone = true;\n      }\n    });\n    setTasks(updateTasks);\n  };\n\n  const handleDelete = (item) => {\n    const updateTasks = tasks.filter((task) => task.id !== item.id);\n    setTasks(updateTasks);\n  };\n\n  const handleRecover = (item) => {\n    let updateTasks = [...tasks];\n    tasks.forEach((task) => {\n      if (task.id === item.id) {\n        task.isDone = false;\n      }\n    });\n\n    setTasks(updateTasks);\n  };\n\n  const taskList = useMemo(() => {\n    return tasks.filter((item) => item.isDone === false);\n  }, [tasks]);\n\n  const completedTaskList = useMemo(() => {\n    return tasks.filter((item) => item.isDone === true);\n  }, [tasks]);\n\n  console.log(JSON.stringify(tasks));\n\n  return (\n    <div className=\"App\">\n      <div className=\"todo\">\n        <TaskInput\n          handleAdd={handleAdd}\n          inputValue={inputValue}\n          setInputValue={setInputValue}\n          errorMessage={errorMessage}\n        />\n        <TaskList tasks={taskList} handleDone={handleDone} />\n        <CompletedTasks\n          completedTasks={completedTaskList}\n          handleDelete={handleDelete}\n          handleRecover={handleRecover}\n          isShowCompleted={isShowCompleted}\n          setIsShowCompleted={setIsShowCompleted}\n        />\n      </div>\n      {taskList.length > 5 && (\n        <span className=\"author\">\n          made with &#10084; by <a href=\"https://github.com/bekza\">bekzat</a>\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","export const generateKey = (pre) => {\n\treturn `${pre}_${new Date().getTime()}`;\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}