{"version":3,"sources":["components/Tasks/TaskInput.jsx","components/Tasks/TaskList.jsx","components/Tasks/CompletedTasks.jsx","components/Tasks/index.jsx","utils/utils.js","App.jsx","reportWebVitals.js","index.js"],"names":["TaskInput","handleAdd","inputValue","setInputValue","errorMessage","className","onSubmit","type","placeholder","value","onChange","e","target","length","TaskList","tasks","handleDone","map","item","name","onClick","event","id","CompletedTasks","completedTasks","setIsHideCompleted","isHideCompleted","handleDelete","handleRecover","Tasks","useState","setErrorMessage","savedCompletedTasks","localStorage","getItem","JSON","parse","setCompletedTasks","savedTasks","setTasks","useEffect","setItem","stringify","pre","preventDefault","Date","getTime","moveTaskToDone","filter","task","updateTasks","itemToRecover","updateCompletedTasks","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb263445.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function TaskInput({\n  handleAdd,\n  inputValue,\n  setInputValue,\n  errorMessage,\n}) {\n  return (\n    <>\n      <h3>Tasks</h3>\n      <form className=\"header\" onSubmit={handleAdd}>\n        <input\n          className=\"todo-input\"\n          type=\"text\"\n          placeholder=\"Add a task...\"\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n        />\n        <button className=\"add-button\" type=\"submit\">\n          &#10133;\n        </button>\n      </form>\n      {errorMessage.length > 0 && (\n        <span className=\"validate\">{errorMessage}</span>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\n\nexport default function TaskList({ tasks, handleDone }) {\n  return (\n    <div className=\"task-list\">\n      {tasks.length > 0 && (\n        <ul>\n          {tasks.map((item) => {\n            return (\n              <li key={item.id}>\n                {item.name}\n                <input\n                  className=\"done-checkbox\"\n                  type=\"checkbox\"\n                  onClick={(event) => handleDone(item)}\n                />\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function CompletedTasks({\n  completedTasks,\n  setIsHideCompleted,\n  isHideCompleted,\n  handleDelete,\n  handleRecover,\n}) {\n  return (\n    <div className=\"completed-tasks\">\n      {completedTasks.length > 0 && (\n        <>\n          <h4>\n            Completed {completedTasks.length}{\" \"}\n            <button\n              className=\"show-hide\"\n              onClick={() => setIsHideCompleted(!isHideCompleted)}\n            >\n              {isHideCompleted ? \"Show\" : \"Hide\"}\n            </button>\n          </h4>\n          {!isHideCompleted && (\n            <ul>\n              {completedTasks.map((item) => {\n                return (\n                  <li key={item.id}>\n                    {item.name}\n                    <span>\n                      <button\n                        className=\"completed-task-icons\"\n                        onClick={() => handleRecover(item)}\n                      >\n                        â¤´\n                      </button>\n                      <button\n                        className=\"completed-task-icons\"\n                        onClick={() => handleDelete(item)}\n                      >\n                        &#10060;\n                      </button>\n                    </span>\n                  </li>\n                );\n              })}\n            </ul>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { generateKey } from \"../../utils/utils\";\nimport TaskInput from \"./TaskInput\";\nimport TaskList from \"./TaskList\";\nimport CompletedTasks from \"./CompletedTasks\";\nimport \"./style.css\";\n\nconst Tasks = () => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isHideCompleted, setIsHideCompleted] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [completedTasks, setCompletedTasks] = useState(() => {\n    const savedCompletedTasks = localStorage.getItem(\"completedTasks\");\n    if (savedCompletedTasks) {\n      return JSON.parse(savedCompletedTasks);\n    } else {\n      return [];\n    }\n  });\n  const [tasks, setTasks] = useState(() => {\n    const savedTasks = localStorage.getItem(\"tasks\");\n    if (savedTasks) {\n      return JSON.parse(savedTasks);\n    } else {\n      return [];\n    }\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    localStorage.setItem(\"completedTasks\", JSON.stringify(completedTasks));\n\n    // set `isHideCompleted` true if no more completed tasks\n    if (completedTasks.length < 1) {\n      setIsHideCompleted(true);\n    }\n  }, [tasks, completedTasks]);\n\n  const handleAdd = (event) => {\n    event.preventDefault();\n\n    if (inputValue.length < 1) {\n      setErrorMessage(\"Please add a task...\");\n      return;\n    }\n\n    setTasks([\n      {\n        id: generateKey(inputValue),\n        name: inputValue,\n      },\n      ...tasks,\n    ]);\n    // reset input and errorMessage after add\n    setErrorMessage(\"\");\n    setInputValue(\"\");\n  };\n\n  const handleDelete = (item) => {\n    const task = completedTasks.filter((task) => task.id !== item.id);\n    setCompletedTasks(task);\n  };\n\n  const handleDone = (item) => {\n    const moveTaskToDone = tasks.filter((task) => task.id === item.id);\n    setCompletedTasks([...completedTasks, ...moveTaskToDone]);\n\n    const updateTasks = tasks.filter((task) => task.id !== item.id);\n    setTasks(updateTasks);\n  };\n\n  const handleRecover = (item) => {\n    const itemToRecover = completedTasks.filter((task) => task.id === item.id);\n    setTasks([...tasks, ...itemToRecover]);\n\n    const updateCompletedTasks = completedTasks.filter(\n      (task) => task.id !== item.id\n    );\n    setCompletedTasks(updateCompletedTasks);\n  };\n\n  return (\n    <div className=\"todo\">\n      <TaskInput\n        handleAdd={handleAdd}\n        inputValue={inputValue}\n        setInputValue={setInputValue}\n        errorMessage={errorMessage}\n      />\n      <TaskList tasks={tasks} handleDone={handleDone} />\n      <CompletedTasks\n        completedTasks={completedTasks}\n        setIsHideCompleted={setIsHideCompleted}\n        isHideCompleted={isHideCompleted}\n        handleDelete={handleDelete}\n        handleRecover={handleRecover}\n      />\n    </div>\n  );\n};\n\nexport default Tasks;\n","export const generateKey = (pre) => {\n\treturn `${pre}_${new Date().getTime()}`;\n}\n","import React from \"react\";\nimport Tasks from \"./components/Tasks\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Tasks />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}